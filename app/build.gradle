apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'  // Google Services plugin

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.acpc.mobilepatienttracker"
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug{
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            testCoverageEnabled.is(true)
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            testCoverageEnabled.is(true)
        }
    }
    testOptions {
        animationsDisabled true

        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'com.google.firebase:firebase-database:19.7.0'
    implementation 'com.google.firebase:firebase-auth:20.0.3'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'com.google.android.material:material:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    implementation 'com.android.support:recyclerview-v7:+'
    implementation 'com.android.support:cardview-v7:+'

    implementation platform('com.google.firebase:firebase-bom:26.8.0')
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-firestore'

    implementation 'androidx.multidex:multidex:2.0.1'

    testImplementation group: 'junit', name: 'junit', version: '4.12'
    
}

project.afterEvaluate {
    def flavors = android.productFlavors.collect { flavor -> flavor.name }

    // If there are no flavors defined, add empty flavor.
    if (!flavors) flavors.add('')

    def buildType = "Debug"
    flavors.each { productFlavorName ->
        def taskNameWithFlavor, pathNameWithFlavor
        if (!productFlavorName) {
            //empty flavors
            taskNameWithFlavor = pathNameWithFlavor = "${buildType}"
        } else {
            taskNameWithFlavor = "${productFlavorName}${buildType}"
            pathNameWithFlavor = "${productFlavorName}/${buildType}"
        }
        def unitTestsTaskName = "test${taskNameWithFlavor.capitalize()}UnitTest"
        def uiTestsTaskName = "connected${taskNameWithFlavor.capitalize()}AndroidTest"

        // Create coverage task ex: 'jacocoTestReport<Flavor>' depending on
        // 'testFlavorDebugUnitTest - unit tests' & connectedFlavorDebugAndroidTest - integration tests.
        task "jacocoTestReport${productFlavorName.capitalize()}"(type: JacocoReport, dependsOn: [unitTestsTaskName, uiTestsTaskName]) {
            group = "Reporting$project.buildDir"
            description = "Generate Jacoco coverage reports on the ${taskNameWithFlavor.capitalize()} build."

            reports {
                xml.enabled = true
                xml.destination file("$project.buildDir/reports/jacoco/report.xml")
                html.enabled = true
                html.destination file("$project.buildDir/reports/jacoco/report.html")
            }

            classDirectories.from fileTree(
                    dir: "${project.buildDir}/intermediates/app_classes/${pathNameWithFlavor}",
                    excludes: ['**/R.class',
                               '**/R$*.class',
                               '**/BuildConfig.class',
                               '**/Manifest.class',
                               '**/Manifest$*.class',
                               '**/*$InjectAdapter.class',
                               '**/*$ModuleAdapter.class',
                               '**/*$ViewInjector*.class',
                               '**/*_MembersInjector.class',
                               '**/Dagger*Component.class',
                               '**/Dagger*Component$Builder.class',
                               '**/*Module_*Factory.class',
                               '**/*$ViewInjector*.*',
                               '**/*$ViewBinder*.*'
                    ])

            def coverageSourceDirs = [
                    "src/main/java",
                    "src/$productFlavorName/java",
                    "src/$buildType/java"
            ]
            additionalSourceDirs.from files(coverageSourceDirs)
            sourceDirectories.from files(coverageSourceDirs)
            executionData.from fileTree(dir: project.buildDir, includes: ["**/*.exec", "**/*.ec"])
        }
    }
}
